{"version":3,"sources":["apis/index.ts","constants/strings.ts","constants/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Victor","axios","create","baseURL","process","generateOrder","amount","a","post","response","recievePayment","payment","razorpay_payment_id","Strings","ok","error","constants","name","email","contact","App","useState","setAmount","midProcess","setMidProcess","validationError","setValidationError","modalText","setModalText","Modal","setAppElement","handlePayment","event","preventDefault","data","options","key","description","order_id","id","handler","theme","color","prefill","window","Razorpay","open","style","width","content","top","left","right","bottom","marginRight","transform","isOpen","length","textAlign","styleSheet","button","background","borderColor","margin","onClick","rootmain","simu","input","type","onChange","newAmount","parseInt","target","value","min","max","placeholder","validation","disabled","position","display","flexDirection","padding","minWidth","fontSize","boxSizing","border","borderRadius","textDecoration","transitionDuration","cursor","backgroundColor","alignSelf","marginLeft","marginTop","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0PAIMA,E,OAASC,EAAMC,OAAO,CAC3BC,QAASC,2CAOGC,EAAa,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACLP,EAAOQ,KAAP,SAAsB,CAC5CF,OAAQA,IAFmB,cACtBG,EADsB,yBAIrBA,GAJqB,2CAAH,sDAYbC,EAAc,uCAAG,WAC7BC,EACAL,GAF6B,eAAAC,EAAA,sEAINP,EAAOQ,KAAP,mBACVG,EAAQC,qBADE,aAGrBN,OAAQA,GACLK,IARwB,cAIvBF,EAJuB,yBAWtBA,GAXsB,2CAAH,wD,gBCxBdI,EACL,GADKA,EAEG,8BAFHA,EAGH,CACRC,GAAI,0DACJC,MAAO,mBALIF,EAOK,gCAPLA,EAQJ,UARIA,EASN,iDATMA,EAUL,oBCVKG,EACF,0BADEA,EAEC,aAFDA,EAGC,uCAHDA,EAIL,UAJKA,EAKH,CACRC,KAAM,gBACNC,MAAO,oBACPC,QAAS,cC0JIC,EA3JO,WAAO,IAAD,EACCC,mBAAS,GADV,mBACpBf,EADoB,KACZgB,EADY,OAESD,oBAAS,GAFlB,mBAEpBE,EAFoB,KAERC,EAFQ,OAGmBH,mBAAS,IAH5B,mBAGpBI,EAHoB,KAGHC,EAHG,OAIOL,mBAAS,IAJhB,mBAIpBM,EAJoB,KAITC,EAJS,KAkB3BC,IAAMC,cAAc,SAMpB,IAgBMC,EAAa,uCAAG,WACrBC,GADqB,mBAAAzB,EAAA,2DAGjBD,GAAU,GAHO,uBAIpBoB,EAAmBb,GAJC,iCAQrBmB,EAAMC,iBACNT,GAAc,GATO,SAYEnB,EAAcC,GAZhB,OAYfG,EAZe,OAabyB,EAASzB,EAATyB,KAIFC,EAAU,CACfC,IAAKpB,EACLC,KAAMD,EACNqB,YAAarB,EACbsB,SAAUJ,EAAKK,GAEfC,QAAQ,WAAD,4BAAE,WAAO/B,GAAP,SAAAF,EAAA,+EAEDG,EAAeD,EAAUH,GAFxB,OAGPkB,GAAc,GAEdI,EAAaf,EAAgBC,IALtB,gDAOPU,GAAc,GACdI,EAAa,GAAD,OAAIf,EAAgBE,MAApB,SARL,yDAAF,mDAAC,GAWR0B,MAAO,CACNC,MAAO1B,GAER2B,QAAS,CACR1B,KAAMD,EAAkBC,KACxBC,MAAOF,EAAkBE,MACzBC,QAASH,EAAkBG,UAKhB,IAAIyB,OAAOC,SAASV,GAC5BW,OAGLtB,GAAc,GAjDO,4CAAH,sDAoDnB,OACC,yBACCuB,MAAO,CACNC,MAAO,gBAGR,kBAAC,IAAD,CAAOD,MA3FY,CACpBE,QAAS,CACRC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,0BAoFiBC,OAAQ7B,EAAU8B,OAAS,GACtD,yBACCV,MAAO,CACNW,UAAW,WAGX/B,EACD,4BACCoB,MAAK,2BACDY,EAAWC,QADV,IAEJC,WAAY,WACZC,YAAa,WACbC,OAAQ,KAETC,QAAS,WACRpC,EAAa,MARf,QAeF,yBAAKmB,MAAOY,EAAWM,UACtB,yBAAKlB,MAAOY,EAAWO,MAAOrD,GAC9B,+BAAQA,GACR,2BACCkC,MAAOY,EAAWQ,MAClBC,KAAK,SACLC,SAtG2B,SAACrC,GAC/B,IAAMsC,EAAYC,SAASvC,EAAMwC,OAAOC,OACpCH,EAAY,EACf5C,EAAmBb,IAEnBa,EAAmBb,GACnBW,GAAc,IAGfF,EAAUgD,IA8FPG,MAAOnE,EACPoE,IAAK,GACLC,IAAK,IACLC,YAAa/D,IAEbY,GACA,yBAAKsB,MAAOY,EAAWkB,YAAapD,GAErC,4BACCsB,MAAOY,EAAWC,OAClBkB,SAAUvD,EACVyC,QAASjC,GAERR,EAAa,gBAAkBV,IAGlC,yBACCkC,MAAO,CACNgC,SAAU,WACV1B,OAAQ,IAHV,2BAM0BjD,4CAQvBuD,EAAqD,CAC1DM,SAAU,CACTe,QAAS,OACTC,cAAe,SACfC,QAAS,GACTC,SAAU,KAEXjB,KAAM,CACLH,OAAQ,EACRrB,MAAO,OACP0C,SAAU,GACV1B,UAAW,SAEZS,MAAO,CACNe,QAAS,YACTnB,OAAQ,QACRsB,UAAW,aACXC,OAAQ,mBACRC,aAAc,OAEf3B,OAAQ,CACPsB,QAAS,YACTxB,UAAW,SACX8B,eAAgB,OAChBR,QAAS,eACTI,SAAU,OACVrB,OAAQ,UACR0B,mBAAoB,OACpBC,OAAQ,UACRC,gBAAiB,QACjBjD,MAAO,QACP4C,OAAQ,oBACRtC,MAAO,MACP4C,UAAW,UAEZf,WAAY,CACXO,SAAU,OACV1C,MAAO,MACPmD,WAAY,KACZC,UAAW,S,MC/LOC,QACU,cAA7BnD,OAAOoD,SAASC,UAEc,UAA7BrD,OAAOoD,SAASC,UAEhBrD,OAAOoD,SAASC,SAASC,MACxB,2DCZHC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SD8HpB,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAAAC,GACLA,EAAaC,gBAEbC,OAAM,SAAA/F,GACNgG,QAAQhG,MAAMA,EAAMiG,c","file":"static/js/main.6e1c473d.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { PaymentResponse } from './types';\r\n\r\n// Make an axios client for the end user\r\nconst Victor = axios.create({\r\n\tbaseURL: process.env.REACT_APP_SERVER_URL,\r\n});\r\n\r\n/**\r\n * Calls the backend order route\r\n * @param amount Amount in INR\r\n */\r\nexport const generateOrder = async (amount: number) => {\r\n\tconst response = await Victor.post(`/order`, {\r\n\t\tamount: amount,\r\n\t});\r\n\treturn response;\r\n};\r\n\r\n/**\r\n * Calls the backend capture routes\r\n * @param payment The Payment response object which razorpat sends us for capturing and verification\r\n * @param amount The amonut which we send for additional capturing and verification\r\n */\r\nexport const recievePayment = async (\r\n\tpayment: PaymentResponse,\r\n\tamount: number,\r\n) => {\r\n\tconst response = await Victor.post(\r\n\t\t`/capture/${payment.razorpay_payment_id}`,\r\n\t\t{\r\n\t\t\tamount: amount,\r\n\t\t\t...payment,\r\n\t\t},\r\n\t);\r\n\treturn response;\r\n};\r\n","export const Strings = {\r\n\tempty: '',\r\n\tinvalidAmount: 'Invalid amount! Please fix.',\r\n\tpayment: {\r\n\t\tok: 'Payment successfull. Transaction stored in the backend.',\r\n\t\terror: 'Payment failed!',\r\n\t},\r\n\tcartPlaceholder: 'Enter cart amount (simulated)',\r\n\tpayNow: 'Pay Now',\r\n\tidea: 'The idea is to simulate the final cart amount.',\r\n\tlabel: 'Enter cart amount',\r\n};\r\n","export const constants = {\r\n\trazorKey: 'rzp_test_RTugXPrT2pA500',\r\n\tpaymentname: 'Assignment',\r\n\tpaymentdesc: 'Some random descriptional (optional)',\r\n\ttheme: '#686CFD',\r\n\tprefill: {\r\n\t\tname: 'Rishav Rungta',\r\n\t\temail: 'assignment@hr.com',\r\n\t\tcontact: '9999999999',\r\n\t},\r\n};\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport { generateOrder, recievePayment } from './apis';\r\nimport Modal from 'react-modal';\r\nimport { Strings } from './constants/strings';\r\nimport { PaymentResponse } from './apis/types';\r\nimport { constants } from './constants';\r\n\r\nconst App: React.FC = () => {\r\n\tconst [amount, setAmount] = useState(0);\r\n\tconst [midProcess, setMidProcess] = useState(false);\r\n\tconst [validationError, setValidationError] = useState('');\r\n\tconst [modalText, setModalText] = useState('');\r\n\r\n\t// Modal Styles so that the modal is center aligned\r\n\tconst customStyles = {\r\n\t\tcontent: {\r\n\t\t\ttop: '50%',\r\n\t\t\tleft: '50%',\r\n\t\t\tright: 'auto',\r\n\t\t\tbottom: 'auto',\r\n\t\t\tmarginRight: '-50%',\r\n\t\t\ttransform: 'translate(-50%, -50%)',\r\n\t\t},\r\n\t};\r\n\r\n\tModal.setAppElement('#root');\r\n\r\n\t/**\r\n\t * Handles the simulated amount change in the cart.\r\n\t * @param event HTMLInputElement event\r\n\t */\r\n\tconst handleCartAmountChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst newAmount = parseInt(event.target.value);\r\n\t\tif (newAmount > 0) {\r\n\t\t\tsetValidationError(Strings.empty);\r\n\t\t} else {\r\n\t\t\tsetValidationError(Strings.invalidAmount);\r\n\t\t\tsetMidProcess(false);\r\n\t\t}\r\n\r\n\t\tsetAmount(newAmount);\r\n\t};\r\n\r\n\t/**\r\n\t * Handles the pay now button event\r\n\t * @param event HTMLButtonElement event\r\n\t */\r\n\tconst handlePayment = async (\r\n\t\tevent: React.MouseEvent<HTMLButtonElement, MouseEvent>,\r\n\t) => {\r\n\t\tif (amount <= 0) {\r\n\t\t\tsetValidationError(Strings.invalidAmount);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tevent.preventDefault();\r\n\t\tsetMidProcess(true);\r\n\r\n\t\t// Use the axios client to hit out order api\r\n\t\tconst response = await generateOrder(amount);\r\n\t\tconst { data } = response;\r\n\r\n\t\t// Build options object to be used by razorpay\r\n\t\t// Ref: https://razorpay.com/docs/payment-gateway/quick-integration/\r\n\t\tconst options = {\r\n\t\t\tkey: constants.razorKey, // THis can be pubic knowledge\r\n\t\t\tname: constants.paymentname,\r\n\t\t\tdescription: constants.paymentdesc,\r\n\t\t\torder_id: data.id,\r\n\t\t\t// Razor pay standard checkout handler https://razorpay.com/docs/payment-gateway/web-integration/standard/\r\n\t\t\thandler: async (response: PaymentResponse) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tawait recievePayment(response, amount);\r\n\t\t\t\t\tsetMidProcess(false);\r\n\t\t\t\t\t// At this point server must have verified the payment and we have the money in our bank\r\n\t\t\t\t\tsetModalText(Strings.payment.ok);\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tsetMidProcess(false);\r\n\t\t\t\t\tsetModalText(`${Strings.payment.error} err`);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\ttheme: {\r\n\t\t\t\tcolor: constants.theme,\r\n\t\t\t},\r\n\t\t\tprefill: {\r\n\t\t\t\tname: constants.prefill.name,\r\n\t\t\t\temail: constants.prefill.email,\r\n\t\t\t\tcontact: constants.prefill.contact,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\t// @ts-ignore We can add this to the window object so typescript does not complain about it\r\n\t\tconst rzp1 = new window.Razorpay(options);\r\n\t\trzp1.open();\r\n\r\n\t\t// Allow button to be clicked again\r\n\t\tsetMidProcess(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\twidth: 'max-content',\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<Modal style={customStyles} isOpen={modalText.length > 0}>\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{modalText}\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t...styleSheet.button,\r\n\t\t\t\t\t\t\tbackground: '##CBE9F6',\r\n\t\t\t\t\t\t\tborderColor: '##88DDFC',\r\n\t\t\t\t\t\t\tmargin: 10,\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetModalText('');\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tOK\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</Modal>\r\n\t\t\t<div style={styleSheet.rootmain}>\r\n\t\t\t\t<div style={styleSheet.simu}>{Strings.idea}</div>\r\n\t\t\t\t<label>{Strings.label}</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tstyle={styleSheet.input}\r\n\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\tonChange={handleCartAmountChange}\r\n\t\t\t\t\tvalue={amount}\r\n\t\t\t\t\tmin={10}\r\n\t\t\t\t\tmax={10000}\r\n\t\t\t\t\tplaceholder={Strings.cartPlaceholder}\r\n\t\t\t\t/>\r\n\t\t\t\t{validationError && (\r\n\t\t\t\t\t<div style={styleSheet.validation}>{validationError}</div>\r\n\t\t\t\t)}\r\n\t\t\t\t<button\r\n\t\t\t\t\tstyle={styleSheet.button}\r\n\t\t\t\t\tdisabled={midProcess}\r\n\t\t\t\t\tonClick={handlePayment}\r\n\t\t\t\t>\r\n\t\t\t\t\t{midProcess ? 'Processing...' : Strings.payNow}\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tposition: 'absolute',\r\n\t\t\t\t\tbottom: 0,\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tBackend is located at - {process.env.REACT_APP_SERVER_URL}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n\r\nconst styleSheet: { [key: string]: React.CSSProperties } = {\r\n\trootmain: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\tpadding: 30,\r\n\t\tminWidth: 500,\r\n\t},\r\n\tsimu: {\r\n\t\tmargin: 4,\r\n\t\tcolor: 'gray',\r\n\t\tfontSize: 11,\r\n\t\ttextAlign: 'right',\r\n\t},\r\n\tinput: {\r\n\t\tpadding: '12px 20px',\r\n\t\tmargin: '8px 0',\r\n\t\tboxSizing: 'border-box',\r\n\t\tborder: '2px solid orange',\r\n\t\tborderRadius: '4px',\r\n\t},\r\n\tbutton: {\r\n\t\tpadding: '10px 20px',\r\n\t\ttextAlign: 'center',\r\n\t\ttextDecoration: 'none',\r\n\t\tdisplay: 'inline-block',\r\n\t\tfontSize: '14px',\r\n\t\tmargin: '2px 2px',\r\n\t\ttransitionDuration: '0.4s',\r\n\t\tcursor: 'pointer',\r\n\t\tbackgroundColor: 'white',\r\n\t\tcolor: 'black',\r\n\t\tborder: '2px solid #4CAF50',\r\n\t\twidth: '50%',\r\n\t\talignSelf: 'center',\r\n\t},\r\n\tvalidation: {\r\n\t\tfontSize: '11px',\r\n\t\tcolor: 'red',\r\n\t\tmarginLeft: '1%',\r\n\t\tmarginTop: '-6px',\r\n\t},\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === 'localhost' ||\r\n\t\t// [::1] is the IPv6 localhost address.\r\n\t\twindow.location.hostname === '[::1]' ||\r\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\r\n\t\twindow.location.hostname.match(\r\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n\t\t),\r\n);\r\n\r\ntype Config = {\r\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener('load', () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\r\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then(registration => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tif (installingWorker == null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === 'installed') {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\r\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.error('Error during service worker registration:', error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl, {\r\n\t\theaders: { 'Service-Worker': 'script' },\r\n\t})\r\n\t\t.then(response => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tconst contentType = response.headers.get('content-type');\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t'No internet connection found. App is running in offline mode.',\r\n\t\t\t);\r\n\t\t});\r\n}\r\n\r\nexport function unregister() {\r\n\tif ('serviceWorker' in navigator) {\r\n\t\tnavigator.serviceWorker.ready\r\n\t\t\t.then(registration => {\r\n\t\t\t\tregistration.unregister();\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.error(error.message);\r\n\t\t\t});\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}